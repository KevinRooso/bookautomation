name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest    
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.8      

      - name: Terraform Init
        run: |
          cd terraform
          terraform init      
    
      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
    #   - name: Get Instance IP
    #     id: get_instance_ip
    #     run: |
    #       cd terraform
    #       INSTANCE_IP=$(terraform output -raw instance_ip)
    #       echo "Debug: The instance IP is: ${INSTANCE_IP}"
    #       echo "INSTANCE_IP=${INSTANCE_IP}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Images
        run: |
          docker build -t kevinrooso/mybooksapi ./api
          docker build -t kevinrooso/mybooksapp ./book-frontend

      - name: Push Docker Images
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push kevinrooso/mybooksapi
          docker push kevinrooso/mybooksapp

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      PUBLIC_IP: "34.244.199.134"  # Public IP
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH for Deployment
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
    
      - name: Install Ansible
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ env.PUBLIC_IP }} "sudo yum install ansible -y"
  
    #   - name: Update hosts.ini with Dynamic IP
    #     run: |
    #       echo "[webserver]" > ansible/hosts.ini
    #       echo "{{ env.PUBLIC_IP }} ansible_ssh_user=ec2-user" >> ansible/hosts.ini

      - name: Copy Ansible Playbook and Inventory
        run: |
          scp -o StrictHostKeyChecking=no -i ec2_key.pem ansible/playbook.yml ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/playbook.yml
          scp -o StrictHostKeyChecking=no -i ec2_key.pem ansible/hosts.ini ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/hosts.ini

      - name: Run Ansible Playbook
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ env.PUBLIC_IP }} "ansible-playbook -i /home/ec2-user/hosts.ini /home/ec2-user/playbook.yml"
          