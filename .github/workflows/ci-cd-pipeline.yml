name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest    
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2 # Checks out the current repo code

      - name: Set up Terraform  
        uses: hashicorp/setup-terraform@v1 # Official Hashicorp way to install terraform in Actions
        with: # Allows to add parameters
          terraform_version: 1.9.8 # Current version i used in Terraform

      - name: Terraform Init
        run: |
          cd terraform
          terraform init      
    
      - name: Terraform Plan
        id: plan
        env: # Adding aws configuration for ec2 instance creation
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform apply -auto-approve tfplan        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 # For Github actions that lets it build images

      - name: Build Docker Images # build-arg flag for passing env variable which is public ip
        run: |
          docker build -t kevinrooso/mybooksapi ./api
          docker build -t kevinrooso/mybooksapp ./book-frontend

      - name: Push Docker Images
        run: | # Pushing to docker hub repo
          docker login -u "${{ secrets.DOCKER_USERNAME }}" --password "${{ secrets.DOCKER_PASSWORD }}"
          docker push kevinrooso/mybooksapi
          docker push kevinrooso/mybooksapp

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      PUBLIC_IP: "108.129.138.231"  # Public IP
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

        # Key pair for ec2 instance ssh
      - name: Set up SSH for Deployment 
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/Mykey.pem
          chmod 400 ~/Mykey.pem         
    
        # StrictHostKey check removed which requires manual approval, -i for identity flag
      - name: Install Ansible 
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/Mykey.pem ec2-user@${{ env.PUBLIC_IP }} "sudo yum install ansible -y"
  
    #   - name: Update hosts.ini with public ip
    #     run: |
    #       echo "[webserver]" > ansible/hosts.ini
    #       echo "{{ env.PUBLIC_IP }} ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/Mykey.pem" >> ansible/hosts.ini

        # -o stands for ssh conf options
      - name: Copy Ansible Playbook,Inventory and Docker Compose file 
        run: |          
          scp -o StrictHostKeyChecking=no -i ~/Mykey.pem ansible/playbook.yml ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/playbook.yml
          scp -o StrictHostKeyChecking=no -i ~/Mykey.pem ansible/hosts.ini ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/hosts.ini
          scp -o StrictHostKeyChecking=no -i ~/Mykey.pem docker-compose.yaml ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/docker-compose.yaml

        # Add EC2 Host Key to known_hosts (Prevents the "yes/no" prompt)
        # ssh-keyscan gets the Public ip and hashes it using -H and add it to known host file in EC2
      - name: Add EC2 Host Key to known_hosts
        run: |          
          ssh -i ~/Mykey.pem -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
          # This code runs in the instance terminal
          ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts
          EOF

      - name: Run Ansible Playbook
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/Mykey.pem ec2-user@${{ env.PUBLIC_IP }} "ansible-playbook -i /home/ec2-user/hosts.ini /home/ec2-user/playbook.yml"
          