name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.8

      - name: Download Terraform State
        uses: actions/download-artifact@v3
        with:
          name: terraform-state
          path: terraform/  # Path where to save the artifact

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Check if Security Group Exists
        id: check_sg
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          if aws ec2 describe-security-groups --group-names "allow_app_ports"; then
            echo "Security group exists."
            echo "security_group_exists=true" >> $GITHUB_ENV
          else
            echo "Security group does not exist."
            echo "security_group_exists=false" >> $GITHUB_ENV
          fi
  
      - name: Import Security Group if Exists
        if: env.security_group_exists == 'true'
        run: |
          cd terraform
          aws_security_group_id=$(aws ec2 describe-security-groups --group-names "allow_app_ports" --query "SecurityGroups[0].GroupId" --output text)
          terraform import aws_security_group.allow_app_ports $aws_security_group_id
    
      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
      - name: Get Instance IP
        id: get_instance_ip
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip | tr -d '\n')
          echo "Debug: The instance IP is: ${INSTANCE_IP}"
          echo "INSTANCE_IP=${INSTANCE_IP}" >> $GITHUB_ENV

      - name: Save Terraform State
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state
          path: terraform/terraform.tfstate  # Path to your state file

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Images
        run: |
          docker build -t kevinrooso/mybooksapi ./api
          docker build -t kevinrooso/mybooksapp ./book-frontend

      - name: Push Docker Images
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push kevinrooso/mybooksapi
          docker push kevinrooso/mybooksapp

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH for Deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Update hosts.ini with Dynamic IP
        run: |
          echo "[webserver]" > ansible/hosts.ini
          echo "${{ env.INSTANCE_IP }} ansible_ssh_user=ec2-user" >> ansible/hosts.ini

      - name: Copy Ansible Playbook and Inventory
        run: |
          scp -o StrictHostKeyChecking=no ansible/playbook.yml ec2-user@${{ env.INSTANCE_IP }}:/home/ec2-user/playbook.yml
          scp -o StrictHostKeyChecking=no ansible/hosts.ini ec2-user@${{ env.INSTANCE_IP }}:/home/ec2-user/hosts.ini

      - name: Run Ansible Playbook
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.INSTANCE_IP }} "ansible-playbook -i /home/ec2-user/hosts.ini /home/ec2-user/playbook.yml"
